package de.tud.cib.bimsage.gui.components.icdd;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import de.tud.cib.bimsage.icdd.activedata.ActiveICDD;
import de.tud.cib.bimsage.icdd.configuration.ICDDModifier;
import de.tud.cib.bimsage.icdd.configuration.input.ModelElement;
import de.tud.cib.bimsage.gui.components.ComponentController;
import de.tud.cib.bimsage.gui.namespaces.icdd.ICDDNameSpaces;
import de.tud.cib.bimsage.gui.utility.messages.MessageFactory;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.LinkedHashSet;
import java.util.Vector;

public class DocumentSelectionDialog extends JDialog {

    private LinkedHashSet<ModelElement> ifcElementSet;

    private static final int posX = 250;
    private static final int posY = 250;

    private JList docList;
    private JPanel contentPane;
    private JButton linkDocButton;
    private JButton cancelButton;

    public DocumentSelectionDialog(Vector<String> documentList, LinkedHashSet<ModelElement> ifcElementSet) {
        this.docList.setListData(documentList);
        this.ifcElementSet = ifcElementSet;

        /*
        ActionListeners
         */

        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        linkDocButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onLinkDocuments();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        /*
        Window-Visualization
         */
        this.panelVisualization();
    }

    private void panelVisualization() {
        this.setContentPane(contentPane);
        this.setModal(true);
        this.pack();
        this.setLocation(posX, posY);
        this.setVisible(true);
    }

    /*
    Events
     */

    private void onLinkDocuments() {
        if (ifcElementSet == null)
            this.processDocumentLinking();
        else
            this.processIfcEntityLinking();
        ComponentController.getInstance().updateICDDTree();
        this.dispose();
        MessageFactory.showSimpleMessage(MessageFactory.MessageType.LINK_DOCUMENTS);
    }

    private void onCancel() {
        this.dispose();
    }

    /*
    Internal Functions
     */

    private void processDocumentLinking() {
        ActiveICDD activeICDD = ActiveICDD.getInstance();
        activeICDD.setIcdd(ICDDModifier.linkDocuments(docList.getSelectedValuesList(), ICDDNameSpaces.DOCUMENT_LINKSET_NAME,
                ICDDNameSpaces.DOCUMENT_LINKSET_NS, activeICDD.getIcdd()));
    }

    private void processIfcEntityLinking() {
        ActiveICDD activeICDD = ActiveICDD.getInstance();
        for (ModelElement ifcElement :
                ifcElementSet) {
            activeICDD.setIcdd(ICDDModifier.linkDocumentsToElement(docList.getSelectedValuesList(), ifcElement,
                    ICDDNameSpaces.DOCUMENT_LINKSET_NAME, ICDDNameSpaces.DOCUMENT_LINKSET_NS, activeICDD.getIcdd()));
        }

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 4, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setMaximumSize(new Dimension(600, 200));
        contentPane.setMinimumSize(new Dimension(600, 200));
        docList = new JList();
        contentPane.add(docList, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Select the Documents that should be linked");
        contentPane.add(label1, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        linkDocButton = new JButton();
        linkDocButton.setText("Link Documents");
        contentPane.add(linkDocButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        contentPane.add(cancelButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}